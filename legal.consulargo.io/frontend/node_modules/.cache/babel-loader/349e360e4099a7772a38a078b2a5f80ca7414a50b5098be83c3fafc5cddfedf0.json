{"ast":null,"code":"import _objectSpread from\"/Users/jayt/Desktop/legal.consulargo.io/legal-admin-system/legal.consulargo.io/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// import axios from 'axios';\nimport{config}from'../config';const API_BASE_URL=config.apiUrl;export const authService={async login(username,password){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/auth/login\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username,password})});if(response.ok){const data=await response.json();return data;}else{const errorData=await response.json();throw new Error(errorData.message||'登录失败');}}catch(error){console.error('Login error:',error);throw error;}},async changePassword(oldPassword,newPassword){try{const token=localStorage.getItem('token');const response=await fetch(\"\".concat(API_BASE_URL,\"/auth/change-password\"),{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(token)},body:JSON.stringify({oldPassword,newPassword})});if(response.ok){return true;}else{const errorData=await response.json();throw new Error(errorData.message||'密码修改失败');}}catch(error){console.error('Change password error:',error);throw error;}},async getCurrentUser(){try{const token=localStorage.getItem('token');const response=await fetch(\"\".concat(API_BASE_URL,\"/auth/me\"),{headers:{'Authorization':\"Bearer \".concat(token)}});if(response.ok){return await response.json();}else{throw new Error('获取用户信息失败');}}catch(error){console.error('Get current user error:',error);throw error;}},async changeUsername(newUsername){try{const token=localStorage.getItem('token');const response=await fetch(\"\".concat(API_BASE_URL,\"/auth/change-username\"),{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(token)},body:JSON.stringify({newUsername})});if(response.ok){const data=await response.json();// 更新本地存储的用户信息\nconst currentUser=JSON.parse(localStorage.getItem('user')||'{}');const updatedUser=_objectSpread(_objectSpread({},currentUser),{},{username:newUsername});localStorage.setItem('user',JSON.stringify(updatedUser));return data;}else{const errorData=await response.json();throw new Error(errorData.error||'用户名修改失败');}}catch(error){console.error('Change username error:',error);throw error;}},async logout(){// 清除本地存储的token和用户信息\nlocalStorage.removeItem('token');localStorage.removeItem('user');}};","map":{"version":3,"names":["config","API_BASE_URL","apiUrl","authService","login","username","password","response","fetch","concat","method","headers","body","JSON","stringify","ok","data","json","errorData","Error","message","error","console","changePassword","oldPassword","newPassword","token","localStorage","getItem","getCurrentUser","changeUsername","newUsername","currentUser","parse","updatedUser","_objectSpread","setItem","logout","removeItem"],"sources":["/Users/jayt/Desktop/legal.consulargo.io/legal-admin-system/legal.consulargo.io/frontend/src/services/authService.ts"],"sourcesContent":["// import axios from 'axios';\nimport { config } from '../config';\n\nconst API_BASE_URL = config.apiUrl;\n\nexport const authService = {\n  async login(username: string, password: string): Promise<{ token: string; user: any }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        return data;\n      } else {\n        const errorData = await response.json();\n        throw new Error(errorData.message || '登录失败');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n\n  async changePassword(oldPassword: string, newPassword: string): Promise<boolean> {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_BASE_URL}/auth/change-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({ oldPassword, newPassword }),\n      });\n\n      if (response.ok) {\n        return true;\n      } else {\n        const errorData = await response.json();\n        throw new Error(errorData.message || '密码修改失败');\n      }\n    } catch (error) {\n      console.error('Change password error:', error);\n      throw error;\n    }\n  },\n\n  async getCurrentUser() {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (response.ok) {\n        return await response.json();\n      } else {\n        throw new Error('获取用户信息失败');\n      }\n    } catch (error) {\n      console.error('Get current user error:', error);\n      throw error;\n    }\n  },\n\n  async changeUsername(newUsername: string): Promise<{ message: string; user: any }> {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_BASE_URL}/auth/change-username`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({ newUsername }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        // 更新本地存储的用户信息\n        const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\n        const updatedUser = { ...currentUser, username: newUsername };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        return data;\n      } else {\n        const errorData = await response.json();\n        throw new Error(errorData.error || '用户名修改失败');\n      }\n    } catch (error) {\n      console.error('Change username error:', error);\n      throw error;\n    }\n  },\n\n  async logout(): Promise<void> {\n    // 清除本地存储的token和用户信息\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}