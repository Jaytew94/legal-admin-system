{"ast":null,"code":"import _objectSpread from\"/Users/jayt/Desktop/legal.consulargo.io/legal-admin-system/legal.consulargo.io/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// 环境配置管理\nconst isDevelopment=process.env.NODE_ENV==='development';// const isProduction = process.env.NODE_ENV === 'production';\n// 检测部署环境\nconst isGitHubPages=window.location.hostname.includes('github.io');const isVercelApp=window.location.hostname.includes('vercel.app');const isRailwayApp=window.location.hostname.includes('railway.app')||window.location.hostname.includes('up.railway.app');const isLocalhost=window.location.hostname==='localhost';// API URL 配置\nconst getApiUrl=()=>{// 开发环境\nif(isDevelopment||isLocalhost){return'http://localhost:3000/api';}// 如果设置了环境变量，优先使用\nif(process.env.REACT_APP_API_URL){return process.env.REACT_APP_API_URL;}// 调试信息\nconsole.log('🔍 环境检测:',{hostname:window.location.hostname,isRailwayApp,isVercelApp,origin:window.location.origin});// Railway 全栈部署环境 - 前后端在同一服务器\nif(isRailwayApp){const apiUrl=window.location.origin+'/api';console.log('✅ Railway API URL:',apiUrl);return apiUrl;}// Vercel 部署环境\nif(isVercelApp){// 如果前端和后端都部署在同一个Vercel项目\nreturn window.location.origin+'/api';}// GitHub Pages 或其他环境 - 强制使用相对路径\n// 在Railway环境下，直接使用相对路径\nconsole.log('🔄 使用相对API路径:',window.location.origin+'/api');return window.location.origin+'/api';};// 默认配置\nconst defaultConfig={apiUrl:getApiUrl(),baseUrl:isDevelopment?'http://localhost:3001':window.location.origin,version:'1.0.0',environment:process.env.NODE_ENV||'development'};// GitHub Pages 特殊配置\nif(isGitHubPages){defaultConfig.baseUrl=window.location.origin+'/legal-admin-system';}export const config=_objectSpread(_objectSpread({},defaultConfig),{},{// 允许环境变量覆盖\napiUrl:process.env.REACT_APP_API_URL||defaultConfig.apiUrl,baseUrl:process.env.REACT_APP_BASE_URL||defaultConfig.baseUrl});export default config;","map":{"version":3,"names":["isDevelopment","process","env","NODE_ENV","isGitHubPages","window","location","hostname","includes","isVercelApp","isRailwayApp","isLocalhost","getApiUrl","REACT_APP_API_URL","console","log","origin","apiUrl","defaultConfig","baseUrl","version","environment","config","_objectSpread","REACT_APP_BASE_URL"],"sources":["/Users/jayt/Desktop/legal.consulargo.io/legal-admin-system/legal.consulargo.io/frontend/src/config/index.ts"],"sourcesContent":["// 环境配置管理\nconst isDevelopment = process.env.NODE_ENV === 'development';\n// const isProduction = process.env.NODE_ENV === 'production';\n\n// 检测部署环境\nconst isGitHubPages = window.location.hostname.includes('github.io');\nconst isVercelApp = window.location.hostname.includes('vercel.app');\nconst isRailwayApp = window.location.hostname.includes('railway.app') || window.location.hostname.includes('up.railway.app');\nconst isLocalhost = window.location.hostname === 'localhost';\n\n// API URL 配置\nconst getApiUrl = () => {\n  // 开发环境\n  if (isDevelopment || isLocalhost) {\n    return 'http://localhost:3000/api';\n  }\n  \n  // 如果设置了环境变量，优先使用\n  if (process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n  \n  // 调试信息\n  console.log('🔍 环境检测:', {\n    hostname: window.location.hostname,\n    isRailwayApp,\n    isVercelApp,\n    origin: window.location.origin\n  });\n  \n  // Railway 全栈部署环境 - 前后端在同一服务器\n  if (isRailwayApp) {\n    const apiUrl = window.location.origin + '/api';\n    console.log('✅ Railway API URL:', apiUrl);\n    return apiUrl;\n  }\n  \n  // Vercel 部署环境\n  if (isVercelApp) {\n    // 如果前端和后端都部署在同一个Vercel项目\n    return window.location.origin + '/api';\n  }\n  \n  // GitHub Pages 或其他环境 - 强制使用相对路径\n  // 在Railway环境下，直接使用相对路径\n  console.log('🔄 使用相对API路径:', window.location.origin + '/api');\n  return window.location.origin + '/api';\n};\n\n// 默认配置\nconst defaultConfig = {\n  apiUrl: getApiUrl(),\n  baseUrl: isDevelopment ? 'http://localhost:3001' : window.location.origin,\n  version: '1.0.0',\n  environment: process.env.NODE_ENV || 'development'\n};\n\n// GitHub Pages 特殊配置\nif (isGitHubPages) {\n  defaultConfig.baseUrl = window.location.origin + '/legal-admin-system';\n}\n\nexport const config = {\n  ...defaultConfig,\n  // 允许环境变量覆盖\n  apiUrl: process.env.REACT_APP_API_URL || defaultConfig.apiUrl,\n  baseUrl: process.env.REACT_APP_BASE_URL || defaultConfig.baseUrl,\n};\n\nexport default config;\n"],"mappings":"4KAAA;AACA,KAAM,CAAAA,aAAa,CAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,aAAa,CAC5D;AAEA;AACA,KAAM,CAAAC,aAAa,CAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,WAAW,CAAC,CACpE,KAAM,CAAAC,WAAW,CAAGJ,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,YAAY,CAAC,CACnE,KAAM,CAAAE,YAAY,CAAGL,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAIH,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,gBAAgB,CAAC,CAC5H,KAAM,CAAAG,WAAW,CAAGN,MAAM,CAACC,QAAQ,CAACC,QAAQ,GAAK,WAAW,CAE5D;AACA,KAAM,CAAAK,SAAS,CAAGA,CAAA,GAAM,CACtB;AACA,GAAIZ,aAAa,EAAIW,WAAW,CAAE,CAChC,MAAO,2BAA2B,CACpC,CAEA;AACA,GAAIV,OAAO,CAACC,GAAG,CAACW,iBAAiB,CAAE,CACjC,MAAO,CAAAZ,OAAO,CAACC,GAAG,CAACW,iBAAiB,CACtC,CAEA;AACAC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAE,CACtBR,QAAQ,CAAEF,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAClCG,YAAY,CACZD,WAAW,CACXO,MAAM,CAAEX,MAAM,CAACC,QAAQ,CAACU,MAC1B,CAAC,CAAC,CAEF;AACA,GAAIN,YAAY,CAAE,CAChB,KAAM,CAAAO,MAAM,CAAGZ,MAAM,CAACC,QAAQ,CAACU,MAAM,CAAG,MAAM,CAC9CF,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEE,MAAM,CAAC,CACzC,MAAO,CAAAA,MAAM,CACf,CAEA;AACA,GAAIR,WAAW,CAAE,CACf;AACA,MAAO,CAAAJ,MAAM,CAACC,QAAQ,CAACU,MAAM,CAAG,MAAM,CACxC,CAEA;AACA;AACAF,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEV,MAAM,CAACC,QAAQ,CAACU,MAAM,CAAG,MAAM,CAAC,CAC7D,MAAO,CAAAX,MAAM,CAACC,QAAQ,CAACU,MAAM,CAAG,MAAM,CACxC,CAAC,CAED;AACA,KAAM,CAAAE,aAAa,CAAG,CACpBD,MAAM,CAAEL,SAAS,CAAC,CAAC,CACnBO,OAAO,CAAEnB,aAAa,CAAG,uBAAuB,CAAGK,MAAM,CAACC,QAAQ,CAACU,MAAM,CACzEI,OAAO,CAAE,OAAO,CAChBC,WAAW,CAAEpB,OAAO,CAACC,GAAG,CAACC,QAAQ,EAAI,aACvC,CAAC,CAED;AACA,GAAIC,aAAa,CAAE,CACjBc,aAAa,CAACC,OAAO,CAAGd,MAAM,CAACC,QAAQ,CAACU,MAAM,CAAG,qBAAqB,CACxE,CAEA,MAAO,MAAM,CAAAM,MAAM,CAAAC,aAAA,CAAAA,aAAA,IACdL,aAAa,MAChB;AACAD,MAAM,CAAEhB,OAAO,CAACC,GAAG,CAACW,iBAAiB,EAAIK,aAAa,CAACD,MAAM,CAC7DE,OAAO,CAAElB,OAAO,CAACC,GAAG,CAACsB,kBAAkB,EAAIN,aAAa,CAACC,OAAO,EACjE,CAED,cAAe,CAAAG,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}