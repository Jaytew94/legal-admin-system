{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isLoading,setIsLoading]=useState(true);useEffect(()=>{// 检查本地存储的token\nconst token=localStorage.getItem('token');if(token){// 验证token有效性\nvalidateToken(token);}else{setIsLoading(false);}},[]);const validateToken=async token=>{try{const response=await fetch('http://localhost:3000/api/auth/me',{headers:{'Authorization':\"Bearer \".concat(token)}});if(response.ok){const userData=await response.json();setUser(userData);}else{localStorage.removeItem('token');}}catch(error){console.error('Token validation failed:',error);localStorage.removeItem('token');}finally{setIsLoading(false);}};const login=async(username,password)=>{try{const response=await fetch('http://localhost:3000/api/auth/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username,password})});if(response.ok){const data=await response.json();localStorage.setItem('token',data.token);setUser(data.user);return true;}else{const errorData=await response.json();console.error('Login failed:',errorData.message);return false;}}catch(error){console.error('Login error:',error);return false;}};const logout=()=>{localStorage.removeItem('token');setUser(null);};const value={user,login,logout,isLoading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","isLoading","setIsLoading","token","localStorage","getItem","validateToken","response","fetch","headers","concat","ok","userData","json","removeItem","error","console","login","username","password","method","body","JSON","stringify","data","setItem","errorData","message","logout","value","Provider"],"sources":["/Users/jayt/Desktop/legal.consulargo.io/legal-admin-system/legal.consulargo.io/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  role: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (username: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // 检查本地存储的token\n    const token = localStorage.getItem('token');\n    if (token) {\n      // 验证token有效性\n      validateToken(token);\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const validateToken = async (token: string) => {\n    try {\n      const response = await fetch('http://localhost:3000/api/auth/me', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n      } else {\n        localStorage.removeItem('token');\n      }\n    } catch (error) {\n      console.error('Token validation failed:', error);\n      localStorage.removeItem('token');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      const response = await fetch('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('token', data.token);\n        setUser(data.user);\n        return true;\n      } else {\n        const errorData = await response.json();\n        console.error('Login failed:', errorData.message);\n        return false;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n\n  const value: AuthContextType = {\n    user,\n    login,\n    logout,\n    isLoading,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}